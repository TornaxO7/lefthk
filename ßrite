use super::{Command, error::CommandError};

const COMMAND_STR: &'static str = "Execute";

#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]
pub struct Execute(String);

impl Execute {
    pub fn new<T: ToString>(shell_command: T) -> Self {
        Self(shell_command.to_string())
    }
}

impl<'a> TryFrom<&'a str> for Execute {
    type Error = CommandError;

    fn try_from(value: &'a str) -> Result<Self, Self::Error> {
        if value == COMMAND_STR {
            Ok(Self::default())
        } else {
            Err(CommandError::UnmatchingString)
        }
    }
}

impl<'a> Command<'a> for Execute {
}
